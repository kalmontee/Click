{"version":3,"sources":["components/NavBar/NavBar.js","components/Header/Header.js","components/Container/CharactersCard.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","className","message","score","topScore","Header","CharactersCard","onClick","imgClickHandler","id","alt","src","image","Footer","App","state","characters","charactersClicked","includes","setState","push","length","i","j","Math","floor","random","this","map","character","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ghEAeeA,MAZf,SAAgBC,GACZ,OACI,6BACI,yBAAKC,UAAU,OACX,wBAAIA,UAAU,gBAAd,eACA,wBAAIA,UAAU,gBAAd,IAA+BD,EAAME,QAArC,KACA,wBAAID,UAAU,gBAAd,UAAqCD,EAAMG,MAA3C,iBAAgEH,EAAMI,a,MCKvEC,MAXf,WACI,OACI,4BAAQJ,UAAU,UACd,yBAAKA,UAAU,aACX,wBAAIA,UAAU,IAAd,+BACA,uBAAGA,UAAU,IAAb,+E,MCMDK,MAXf,SAAwBN,GACpB,OACI,yBAAKC,UAAU,cAEX,yBAAKA,UAAU,OAAOM,QAAS,kBAAMP,EAAMQ,gBAAgBR,EAAMS,MAC7D,yBAAKC,IAAKV,EAAMS,GAAIE,IAAKX,EAAMY,W,MCGhCC,MARf,WACI,OACI,yBAAKZ,UAAU,UACX,sD,OC4EGa,G,iNAxEbC,MAAQ,CACNC,aACAb,MAAO,EACPC,SAAU,GACVF,QAAS,2BACTe,kBAAmB,I,EAIrBT,gBAAkB,SAAAC,GAEhB,IAAIQ,EAAoB,EAAKF,MAAME,kBAEnC,GAAIA,EAAkBC,SAAST,GAC7B,EAAKU,SAAS,CACZF,kBAAmB,GACnBd,MAAO,EACPD,QAAS,wCAQX,GAFAe,EAAkBG,KAAKX,GAEU,KAA7BQ,EAAkBI,OAAtB,CASA,EAAKF,SAAS,CACZhB,MAAOc,EAAkBI,OACzBnB,QAAS,yBAGX,IAAK,IAAIoB,EAAIN,EAAWK,OAAS,EAAGC,EAAI,EAAGA,IAAK,CAC9C,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADM,EAEb,CAACN,EAAWO,GAAIP,EAAWM,IAA3DN,EAAWM,GAFkC,KAE9BN,EAAWO,GAFmB,WAb9C,EAAKJ,SAAS,CACZhB,MAAO,GACPD,QAAS,+BACTe,kBAAmB,M,wEAiBjB,IAAD,OACP,OACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,CACEC,QAASyB,KAAKZ,MAAMb,QACpBC,MAAOwB,KAAKZ,MAAMZ,MAClBC,SAAUuB,KAAKZ,MAAMX,WAEvB,kBAAC,EAAD,MACA,0BAAMH,UAAU,aACb0B,KAAKZ,MAAMC,WAAWY,KAAI,SAAAC,GAAS,OAClC,kBAAC,EAAD,CACErB,gBAAiB,EAAKA,gBACtBC,GAAIoB,EAAUpB,GACdqB,IAAKD,EAAUpB,GACfG,MAAOiB,EAAUjB,YAKvB,kBAAC,EAAD,W,GAnEUmB,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f6bc4f47.chunk.js","sourcesContent":["import React from 'react';\r\nimport navbar from './navbar.css';\r\n\r\nfunction NavBar(props) {\r\n    return (\r\n        <div>\r\n            <nav className='nav'>\r\n                <h2 className='navBar-title'>Clicky Game</h2>\r\n                <h2 className='navBar-begin'> {props.message} </h2>\r\n                <h2 className='navBar-score'>Score: {props.score} | Top Score: {props.topScore}</h2>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport header from './header.css'\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className=\"header\">\r\n            <div className=\"jumbotron\">\r\n                <h1 className=\"\">Welcome to The Clicky Game!</h1>\r\n                <p className=\"\">Click on an image to earn points, but don't click on any more than once!</p>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\nimport container from './container.css';\r\n\r\nfunction CharactersCard(props) {\r\n    return (\r\n        <div className=\"characters\">\r\n            {/* <div className='card' onClick={props.imgClickHandler}> */}\r\n            <div className='card' onClick={() => props.imgClickHandler(props.id)}>\r\n                <img alt={props.id} src={props.image}></img>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharactersCard;","import React from 'react';\r\nimport footer from './footer.css';\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div className='footer'>\r\n            <h5>Kelvin Almonte, 2020</h5>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport NavBar from './components/NavBar/NavBar';\nimport Header from './components/Header/Header';\nimport CharactersCard from './components/Container/CharactersCard';\nimport Footer from './components/Footer/Footer';\nimport characters from './characters.json';\nimport './App.css';\n\n\nclass App extends Component {\n  state = {\n    characters,\n    score: 0,\n    topScore: 12,\n    message: \"Click an image to begin!\",\n    charactersClicked: []\n  }\n\n\n  imgClickHandler = id => {\n\n    let charactersClicked = this.state.charactersClicked;\n\n    if (charactersClicked.includes(id)) {\n      this.setState({\n        charactersClicked: [],\n        score: 0,\n        message: \"You lost! Click again to play!\"\n      });\n      return;\n\n    } else {\n\n      charactersClicked.push(id);\n\n      if (charactersClicked.length === 12) {\n        this.setState({\n          score: 12,\n          message: \"Winner! Click to play again!\",\n          charactersClicked: []\n        });\n        return;\n      }\n\n      this.setState({\n        score: charactersClicked.length,\n        message: \"You guessed correct!\",\n      });\n\n      for (let i = characters.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [characters[i], characters[j]] = [characters[j], characters[i]];\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar\n          message={this.state.message}\n          score={this.state.score}\n          topScore={this.state.topScore} />\n\n        <Header />\n        <main className=\"container\">\n          {this.state.characters.map(character => (\n            <CharactersCard\n              imgClickHandler={this.imgClickHandler}\n              id={character.id}\n              key={character.id}\n              image={character.image}\n            />\n          ))}\n\n        </main>\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}